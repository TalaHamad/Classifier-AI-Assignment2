/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project.myproject.aisecondproject;

import java.awt.Point;
import static java.lang.Math.pow;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author Lenovo
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    extendedPanel jPanel2;
    public Shape shape;
    public ArrayList<Shape>Dataset;
    Double LearningRate;
    int maxNumIterations,truePrediction;
    Double w1,w2,threshold,error,Y_actual,Y_desired,sigmoidOutput;
    double x1,x2,y1,y2;
    public MainFrame() 
    {
        initComponents();
        shape=new Shape();
        Dataset = new ArrayList<Shape>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new extendedPanel();
        testpointRB = new javax.swing.JRadioButton();
        squareRB = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        LearnBTN = new javax.swing.JButton();
        MaxItTF = new javax.swing.JTextField();
        TestBTN = new javax.swing.JButton();
        LRTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        triangleRB = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        accuracyResult = new javax.swing.JLabel();
        resultTest = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 130, 410, 350));

        buttonGroup1.add(testpointRB);
        testpointRB.setFont(new java.awt.Font("Britannic Bold", 0, 18)); // NOI18N
        testpointRB.setText("Test Point");
        testpointRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testpointRBActionPerformed(evt);
            }
        });
        jPanel1.add(testpointRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 450, -1, -1));

        buttonGroup1.add(squareRB);
        squareRB.setFont(new java.awt.Font("Britannic Bold", 0, 18)); // NOI18N
        squareRB.setText("Square");
        jPanel1.add(squareRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, -1, -1));

        jLabel3.setFont(new java.awt.Font("Britannic Bold", 0, 18)); // NOI18N
        jLabel3.setText("Max # Iterations");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        LearnBTN.setBackground(new java.awt.Color(255, 218, 0));
        LearnBTN.setFont(new java.awt.Font("Britannic Bold", 0, 18)); // NOI18N
        LearnBTN.setText("Learn");
        LearnBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        LearnBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LearnBTNActionPerformed(evt);
            }
        });
        jPanel1.add(LearnBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 110, 50));

        MaxItTF.setFont(new java.awt.Font("Britannic Bold", 0, 14)); // NOI18N
        MaxItTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaxItTFActionPerformed(evt);
            }
        });
        jPanel1.add(MaxItTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 130, 40));

        TestBTN.setBackground(new java.awt.Color(255, 218, 0));
        TestBTN.setFont(new java.awt.Font("Britannic Bold", 0, 18)); // NOI18N
        TestBTN.setText("Test");
        TestBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TestBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestBTNActionPerformed(evt);
            }
        });
        jPanel1.add(TestBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 370, 110, 50));

        LRTF.setFont(new java.awt.Font("Britannic Bold", 0, 14)); // NOI18N
        LRTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LRTFActionPerformed(evt);
            }
        });
        jPanel1.add(LRTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 290, 130, 40));

        jLabel4.setFont(new java.awt.Font("Britannic Bold", 0, 18)); // NOI18N
        jLabel4.setText("Learning Rate");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));

        buttonGroup1.add(triangleRB);
        triangleRB.setFont(new java.awt.Font("Britannic Bold", 0, 18)); // NOI18N
        triangleRB.setText("Triangle");
        jPanel1.add(triangleRB, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        jLabel2.setFont(new java.awt.Font("Britannic Bold", 0, 36)); // NOI18N
        jLabel2.setText("Binary Classifier");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 50, -1, -1));

        accuracyResult.setBackground(new java.awt.Color(255, 218, 0));
        accuracyResult.setFont(new java.awt.Font("Britannic Bold", 0, 24)); // NOI18N
        accuracyResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(accuracyResult, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 500, 280, 30));

        resultTest.setBackground(new java.awt.Color(255, 218, 0));
        resultTest.setFont(new java.awt.Font("Britannic Bold", 0, 24)); // NOI18N
        resultTest.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(resultTest, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 500, 280, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        setLocationRelativeTo(null);
    }//GEN-LAST:event_formWindowOpened

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        // TODO add your handling code here:;
 
        shape = new Shape();
        Point p =new Point();
        p.x=evt.getX();
        p.y=evt.getY();
        shape.setX(p.x);
        shape.setY(p.y);

        if(triangleRB.isSelected())
        {
            shape.setType("triangle");
            Dataset.add(shape);
        }

        else if (squareRB.isSelected())
        {
            shape.setType("square");
            Dataset.add(shape);
        }
        else if(testpointRB.isSelected())
            shape.setType("testPoint");

        
        jPanel2.draw(shape);
    }//GEN-LAST:event_jPanel2MouseClicked

    private void LearnBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LearnBTNActionPerformed
        // TODO add your handling code here:
        jPanel2.clearLines();
        truePrediction=0;
        LearningRate=Double.parseDouble(LRTF.getText());
        maxNumIterations=Integer.parseInt(MaxItTF.getText());
        initialization();
        for(int i=0,j=0;i<maxNumIterations;i++,j++)
        {
            double normalizedْْْX1=normalizeX1(Dataset.get(j).getX());
            double normalizedX2=normalizeX2(Dataset.get(j).getY());
            Y_actual=Activation(normalizedْْْX1,normalizedX2,w1,w2,threshold);
            Y_desired= Dataset.get(j).getType().equals("triangle")?1.0:0.0;
            error=Y_desired-Y_actual;
            System.out.println("Error="+error);
            if(Math.abs(error)<=0.3)
                truePrediction++;
            if(error!=0)
                weightTraining(normalizedْْْX1,normalizedX2,error);
            if(j==Dataset.size()-1)
                j=0;
        }
        System.out.println(truePrediction);
        float accuracy=(float) truePrediction/maxNumIterations;
        System.out.println("Accuracy="+accuracy);
        accuracyResult.setText("Accuracy= "+(accuracy*100)+"%");
        assignLinePoints();
        jPanel2.drawLine((int) x1,(int) y1,(int) x2,(int) y2);
    }//GEN-LAST:event_LearnBTNActionPerformed

     public double normalizeX1(double x1 )
     {

        double iMin =0, iMaxx = 410,Nmax =1, Nmin=-1 ;
        double Inx = ( (x1 - iMin) *((Nmax -Nmin)/(iMaxx-iMin)) + Nmin);
        return Inx;
    
    }
    public double normalizeX2(double x2 )
    {
        double iMin =0, iMaxY = 350, Nmax =1, Nmin=-1 ;
        double InY = ( (x2 - iMin) *((Nmax -Nmin)/(iMaxY-iMin)) + Nmin);
        return InY;
    }
    public double denormalizeX2 (double x2)
    {
        double Nmin=-1, Nmax=1 , Omin=0,  OmaxY = 350;
        double denormalizedX2 =  ((x2 - Nmin )*((OmaxY - Omin)/(Nmax-Nmin)) + Omin);
        return denormalizedX2;
    }     
    public double denormalizeX1 (double in )
    {
        double Nmin=-1, Nmax=1 , OmaxX=410 , Omin=0;
        double On= in;
        double OX=((On - Nmin )*((OmaxX - Omin)/(Nmax-Nmin)) + Omin);
        return OX;
    }  
    
    public void initialization()
    {
        Random random = new Random();
        int randomInt1 = random.nextInt(50 - -50 + 1) + -50;
        int randomInt2 = random.nextInt(50 - -50 + 1) + -50;
        int randomInt3 = random.nextInt(50 - -50 + 1) + -50;
        w1= (double)randomInt1/100;
        w2= (double)randomInt2/100;
        threshold=(double)randomInt3/100;
    }
    public Double Activation(double x1,double x2,double w1,double w2,double threshold)
    {
        
        double sumOutput= x1*w1 + x2*w2 + threshold;
        sigmoidOutput=1/(1+pow(Math.E,-sumOutput));
        System.out.println(sigmoidOutput);
        return sigmoidOutput;
    }
    public void weightTraining(double x1,double x2,double error)
    {
        double newW1=x1*LearningRate*error;
        double newW2=x2*LearningRate*error;
        w1=w1+newW1;
        w2=w2+newW2;
    }
    public void assignLinePoints()
    {
        //calulcate m and c for 
        //y=mx+c
        double m = -w1/w2;
        double c = threshold/w2;
        double temporaryX1 , temporaryX2;
        temporaryX1 = normalizeX1(0.0);
        temporaryX2 = normalizeX1(410.0);
        
        //First point for the line
        x1 = denormalizeX1(temporaryX1);
        y1 = m*temporaryX1 +c;
        y1 = denormalizeX2(y1);
        //Second point for the line
        x2 = denormalizeX1(temporaryX2);
        y2 = m*temporaryX2 +c ;
        y2 = denormalizeX2(y2);    
    }
    private boolean isAboveLine(double x1, double y1, double x2, double y2, double px, double py) 
    {
    double m = (y2 - y1) / (x2 - x1);
    double b = y1 - m * x1;
    double expectedY = m * px + b;
    return py < expectedY;
    }
    private void MaxItTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaxItTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaxItTFActionPerformed

    private void TestBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestBTNActionPerformed
        // TODO add your handling code here:
        boolean flagFirstShape=isAboveLine(x1,y1,x2,y2,Dataset.get(0).getX(),Dataset.get(0).getY());
        boolean flagTestPoint=isAboveLine(x1,y1,x2,y2,shape.getX(),shape.getY());
        if(flagTestPoint == flagFirstShape)
        {
            resultTest.setText("Test point is a "+Dataset.get(0).getType());
        }
        else
        {
            String type=Dataset.get(0).getType().equals("triangle")?"square":"triangle";
            resultTest.setText("Test point is a "+type);
        }
    }//GEN-LAST:event_TestBTNActionPerformed

    private void LRTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LRTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LRTFActionPerformed

    private void testpointRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testpointRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_testpointRBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField LRTF;
    private javax.swing.JButton LearnBTN;
    private javax.swing.JTextField MaxItTF;
    private javax.swing.JButton TestBTN;
    private javax.swing.JLabel accuracyResult;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel resultTest;
    private javax.swing.JRadioButton squareRB;
    private javax.swing.JRadioButton testpointRB;
    private javax.swing.JRadioButton triangleRB;
    // End of variables declaration//GEN-END:variables
}
